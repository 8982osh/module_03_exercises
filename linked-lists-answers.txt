Give written answers for each question and put them in linked-lists-answers.txt:

1. What are some pros and cons of using linked lists instead of arrays?

Linked lists tend to handle large amounts of data well. They grow in size only using memory space as needed. Since linked lists use pointers, it is possible that a pointer can be corrupt and “point” to the incorrect data. 

Arrays have their data indexed. This makes locating data easy since you can just reference the data by its index number. Removing data from an array can leave empty spaces which is a waste of memory. When created, arrays tend to be a fixed. Resizing an array can be difficult. 

2. Come up with a real world example of a linked list.

Train_car_main—->train_car_dining—->train_car_sleeping
 ===Programming Questions=== You may program the following questions in any language of your choice (JavaScript, Ruby, etc.). 
Before beginning to code, write out a plan explaining how to solve the question.

1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.
 FUNCTION push(element)
  CREATE node
  SET node.value TO element
  SET node.next TO null
 	
  IF the head node does not exist
    THEN SET head to node
  ELSE
    SET current to head
    SET current.next to node
  END IF

END FUNCTION

==Solution==
I believe the previous function is missing a while loop to go through the entire linked list.

FUNCTION push(element)
  CREATE node
  SET node.value TO element
  SET node.next TO null
  
WHILE(node.value != null)	
  IF the head node does not exist
    THEN SET head to node
  ELSE
    SET current to head
    SET current.next to node
  END WHILE

END FUNCTION 
 2. Given an unsorted singly linked list, remove all duplicates from the linked list. Example Input: a -> c -> d -> d -> a Output: a -> c -> d

FUNCTION removeDuplicates(headNode, input)
  SET currentNode to headNode  
  WHILE(currentNode != null)
    IF(currentNode = nextNode)
      REMOVE nextNode
      SET currentNode to currentNode.next   
    ELSE
      SET currentNode to nextNode
    END IF
  END WHILE
END FUNCTION 
 
3. Given an unsorted singly linked list, reverse it. Example Input: a -> b -> c -> d Output: d -> c -> b -> a

FUNCTION reverseLinks(headNode, input)
  SET currentNode to headNode
  WHILE (currentNode != null)
    nextNode = currentNode.next
    currentNode.next = previousNode
    previousNode = currentNode
    currentNode = nextNode
  END WHILE
END FUNCTION
