1. In your own words, explain what clean code is and why it is important.
Clean code describes a program that has been designed to be functional and simplistic. The code is free or error, bugs and is able to perform the task it was intended for. The code is readable without relying heavily on comments. Redundancy is eliminated.


2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

The chips embedded in debit/credit cards provide security, tracking and notification to bank on your activities. Banks are able to verify your purchases, and that the card you are using is one they issued to you. If the code on the chips were not properly designed to require the correct pin, or send the correct authentication to the bank, then anyone could use your card to access your funds. Your account could be depleted quickly. Then you may be stuck with late fees for other bills that were not paid, or no access to any cash. Trying to solve this problem, could take a while. The process of “what should transpire” when a debit/credit card is used, ensure your identity and security. We have become reliant on these cards for payment, more so than cash. 


3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)              // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

===Refactored===
FUNCTION d(temperature, measurement)
  IF measurement = “F” THEN
    SET degrees to (temperature − 32) * (5/9) 
  ELSE IF measurement = "C" THEN
    SET degrees to (temperature * 1.8000 + 32.00)
  PRINT degrees
  END IF
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

===Refactored===
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
   SET percentage to sum / total * 100
   PRINT percentage
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF
 
END FUNCTION


5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

5.a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

===Refactored===
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
  var subTotalAmount = subTotal * discountRate + (subTotal * tax);
  
   PRINT "Your total due is: " + subTotalAmount

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotalAmount
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotalAmount
   END IF
END FUNCTION

5.b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

===Refactored===
FUNCTION checkoutBook(book, guest)
   IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND (guest.outstandingFees = 0) THEN
     APPEND book to guest.books
     SET book.status to "Checked Out"
     PRINT "Your books have been issued."
   ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

5.c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION


6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

===Code===
function findSquare(items){
  var j, sum = 0, answer;
  for(j = 0; j<items.length; j++ ){
    sum += items[j];  
  }

  if (Math.sqrt(sum) % 1 === 0){
    answer = Math.sqrt(sum);
    return answer;
  } else {
    return sum;
  }
}
 
7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function findDuplicates(items) {
  var a, b;
  for(a = 0; a <= items.length; a++) {
        for(b = a; b <= items.length; b++) {
            if(a != b && items[a] == items[b]) {
                return true;
            }
        }
    }
    return false;
}//end function 